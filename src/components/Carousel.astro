---
import { Image } from "astro:assets";

interface Props {
  srcs: ImageMetadata[];
}

const { srcs } = Astro.props;
---

<div
  class="embla cursor-grab active:cursor-grabbing mx-auto aspect-[3/2] w-full max-w-screen-lg overflow-hidden rounded-none lg:rounded-img"
>
  <div class="flex">
    {
      srcs.map((src) => (
        <div class="min-w-0 shrink-0 grow-0 basis-full">
          <Image src={src} class="w-full" loading="eager" alt="" />
        </div>
      ))
    }
  </div>
</div>

<script>
  import EmblaCarousel, { type EmblaOptionsType } from "embla-carousel";
  import Autoplay, { type AutoplayOptionsType } from "embla-carousel-autoplay";

  const emblaNodes = [].slice.call(document.querySelectorAll(".embla"));
  const emblaOptions: EmblaOptionsType = { loop: true };
  const autoplayOptions: AutoplayOptionsType = {
    delay: 5000,
    stopOnMouseEnter: true,
  };

  const indicatorNodes = document.querySelectorAll(
    ".carousel-project-indicator",
  );

  const emblaCarousels = emblaNodes.map(function (emblaNode) {
    return EmblaCarousel(emblaNode, emblaOptions, [Autoplay(autoplayOptions)]);
  });

  const setIndicator = (): void => {
    indicatorNodes.forEach((node, i) => {
      node.innerHTML =
        (emblaCarousels[i].selectedScrollSnap() + 1).toString() +
        "/" +
        emblaCarousels[i].slideNodes().length.toString();
    });
  };

  emblaCarousels.forEach((carousel) => {
    carousel
      .on("init", setIndicator)
      .on("reInit", setIndicator)
      .on("select", setIndicator);
  });
</script>
